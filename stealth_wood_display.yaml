#original version by nikolai on wiki.vspace.one
#modified by H3

esphome:
  name: ledmatrixdisplay
  platform: ESP8266
  board: nodemcuv2
  on_boot:
    priority: 1000
    then:
      - component.update: mtx_disp

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ledmatrixdisplay"
    password: "iw3jEjew493VBmk5"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
  - service: show_message
    variables:
      txt: string
      duration: int
    then:
      - lambda: |-
          //duration
          if (id(disp_duration)>0) id(disp_duration) = duration;
          else id(disp_duration) = 300;
          //txt
          char* txt_ptr = id(disp_txt);
          const size_t dest_size = sizeof(id(disp_txt))-4;
          strncpy(txt_ptr, txt.c_str(), dest_size);
          txt_ptr = id(disp_txt);
          strcat(txt_ptr, " . ");
      - logger.log:
         format: "New text to display for %d seconds: %s"
         args: [ 'id(disp_duration)', 'id(disp_txt)' ]
      - component.update: mtx_disp
      - script.execute: clear_disp_timeout

ota:
  on_begin: 
    then:
      - lambda: |-
          char* txt_ptr = id(disp_txt);
          strcpy(txt_ptr, "OTA...");
      - component.update: mtx_disp
#  on_progress: 
#    then:
#      - lambda: 
#         id(mtx_disp).printf(0, -4, id(OpenMine_17_font), "OTA %03.1f%%", x);
#  on_end:
#    then:
#      - lambda: 
#         id(mtx_disp).print(0, -4, id(OpenMine_17_font), "OTA done :)");
#  on_error:
#    then:
#      - lambda: 
#         id(mtx_disp).print(0, -4, id(OpenMine_17_font), "OTA ERROR X_X");

globals:
  - id: disp_txt
    type: char[1024]
    restore_value: False
    initial_value: |-
      {'v','s','p','a','c','e','.','o','n','e',0}
  - id: disp_duration
    type: int32_t
    restore_value: False
    initial_value: "300"

status_led:
  pin:
    number: D5
    inverted: True

script:
  - id: clear_disp_timeout
    mode: restart
    then: 
      - delay: !lambda "return uint32_t(id(disp_duration)) * 1000;"
      - lambda: |-
          char* txt_ptr = id(disp_txt);
          strcpy(txt_ptr, "vspace.one");
      - component.update: mtx_disp

spi:
  clk_pin: D0
  mosi_pin: D2

time:
  - platform: homeassistant
    id: ha_time

display:
  - platform: max7219digit
    id: mtx_disp
    cs_pin: D1
    num_chips: 8
    intensity: 15
    scroll_speed: 50ms
    scroll_delay: 250ms
    update_interval: never
    lambda: |-
      const char* txt_ptr = id(disp_txt);
      it.clear();
      it.print(0, -4, id(OpenMine_17_font), txt_ptr);

font:
  - file: "OpenMine.ttf"
    id: OpenMine_17_font
    size: 17

sensor:
  # Lightsensor Behind Wood
  - platform: bh1750
    id: light_behind_wood
    name: "Light Behind Wood"
    address: 0x5C
    update_interval: 60s
    # Lightsensor Room
  - platform: bh1750
    id: light_room
    name: "Light Room"
    address: 0x23
    update_interval: 60s
    on_value:
      lambda: |-
        if (x > 0) id(mtx_disp).intensity(std::clamp( x*3 ,float(1),float(15)));
        else id(mtx_disp).intensity(15);

i2c:
  sda: D3
  scl: D4
  scan: True
  id: bus_a
